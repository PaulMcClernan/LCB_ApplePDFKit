library community.applepdfkit.paulmcclernan
-- widget com.livecode.widget.applepdfkit.paulmcclernan

use com.livecode.engine
use com.livecode.foreign
use com.livecode.objc
use com.livecode.array
use com.livecode.list
use com.livecode.byte
use com.livecode.date
use com.livecode.binary
use com.livecode.bitwise
use com.livecode.math
use com.livecode.string
use com.livecode.widget
use com.livecode.canvas
use com.livecode.library.widgetutils

metadata version is "0.0.5"
metadata author is "Paul McClernan"
metadata title is "LCB ApplePDFKitLib"
metadata svgicon is ""

constant kAudioUnitManufacturer_Apple is 1634758764 -- 'lppa' reversed for Intel, PowerPC would be 1819308129 -- "appl"

public handler getIntegerFromFourCharCodeLittleEndian(in pStr as String) returns optional Uint32
   variable tUint32 as Uint32
   put (the code of char 4 of pStr) * 16777216 into tUint32 ---  256 * 256 * 256
   put tUint32 + ((the code of char 3 of pStr) * 65536 ) into tUint32 -- 256 * 256
   put tUint32 + ((the code of char 2 of pStr) * 256 ) into tUint32
   put tUint32 + (the code of char 1 of pStr) into tUint32
   return tUint32
end handler

public handler getIntegerFromFourCharCodeBigEndian(in pStr as String) returns optional Uint32
   variable tUint32 as Uint32
   put (the code of char 1 of pStr) * 16777216 into tUint32
   put tUint32 + ((the code of char 2 of pStr) * 65536 ) into tUint32
   put tUint32 + ((the code of char 3 of pStr) * 256 ) into tUint32
   put tUint32 + (the code of char 4 of pStr) into tUint32
   return tUint32
end handler

-- foreign handler MCDataGetBytePtr(in pData as Data) returns Pointer binds to "<builtin>"
public handler getFourCharCodeFromUint32( in pNum as optional any) returns optional String
   -- 1383023468 = appl
   variable tStr as String
   variable tTempStr as String
   variable tNum as Number
   variable tBinsStr as String
   -- log pNum
   if pNum is not nothing then
      if pNum is a number then
         put pNum formatted as string into pNum
      end if
      put pNum converted from base 10 to base 16 into tBinsStr
      if (the number of chars in tBinsStr) < 8 then
         put 8 - (the number of chars in tBinsStr) into tNum
         repeat tNum times
            put "0" before tBinsStr
         end repeat
         -- log tBinsStr
      end if
       put ( (char 1 to 2 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) into tStr
       put ( (char 3 to 4 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) after tStr
       put ( (char 5 to 6 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) after tStr
       put ( (char 7 to 8 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) after tStr
      return tStr
   else
      return the empty string
   end if
end handler

public handler LogNSObjectClassName(in tNSObj as optional ObjcId)
   variable tOSStatus as CSInt
   variable tNSStrObj as optional ObjcId
   variable tStr as optional String
   if tNSObj is not nothing then
   unsafe
      put objC_NSObjectClassName(tNSObj) into tNSStrObj
      put StringFromNSString(tNSStrObj) into tStr
      log tStr
   end unsafe
   else
      log "No Object"
   end if
end handler

public handler GetNSObjectClassName(in tNSObj as optional ObjcId) returns optional String
   variable tOSStatus as CSInt
   variable tNSStrObj as optional ObjcId
   variable tStr as optional String
   if tNSObj is not nothing then
   unsafe
      put objC_NSObjectClassName(tNSObj) into tNSStrObj
      put StringFromNSString(tNSStrObj) into tStr
      return tStr
   end unsafe
   else
      return nothing
   end if
end handler

public foreign type CGSize binds to "MCAggregateTypeInfo:qq"
public foreign type NSRect binds to "MCAggregateTypeInfo:qqqq"
public foreign type CGImageRef binds to "MCAggregateTypeInfo:r"
public foreign type CGPoint binds to "MCAggregateTypeInfo:qq"

private variable sMyWindow as optional ObjcObject
private variable mPDFView as optional ObjcObject
private variable mPDFDocument as optional ObjcObject
private variable sMyWindowController as optional ObjcObject
private variable sPDFViewController as optional ObjcObject

private foreign handler ObjC_NSApplicationSharedApplication() returns ObjcId binds to "objc:NSApplication.+sharedApplication"
private foreign handler objC_NSURLURLWithString(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.+URLWithString:"
private foreign handler objC_NSURLfileOrDirURLWithPath(in pPathString as ObjcId, in pIsDir as CBool) returns ObjcId binds to "objc:.NSURL.+fileURLWithPath:isDirectory:"
private foreign handler objC_NSURLfileURLWithPath(in pPathString as ObjcId) returns ObjcId binds to "objc:NSURL.+fileURLWithPath:"
private foreign handler objC_NSURLGetAbsoluteString(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.absoluteString"
private foreign handler objC_NSURLGetPath(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.path"
private foreign handler c_NSClassFromString(in pClassNameString as ObjcId) returns ObjcId binds to "c:NSClassFromString"

private foreign handler objC_NSErrorAlloc() returns ObjcId binds to "objc:NSError.+alloc"
private foreign handler objC_NSObjectRetain(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-retain"
private foreign handler objC_NSObjectAutoRealease(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-autorelease"
private foreign handler objC_NSObjectRelease(in pNSObj as ObjcId) returns nothing binds to "objc:NSObject.-release"
private foreign handler objC_NSObjectDescription(in pNSObj as optional ObjcId) returns ObjcId binds to "objc:NSObject.description"
private foreign handler objC_NSObjectClassName(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.className"
private foreign handler objC_NSObjectGetSuperClass(in pNSObj as ObjcId) returns ObjcRetainedId binds to "c:NObject.+superclass:"

private foreign handler ObjC_NSBundleWithURL(in pNSURL as ObjcId) returns ObjcId binds to "objc:NSBundle.+bundleWithURL:"
private foreign handler ObjC_NSBundleGetClassNamed(in pNSbundle as ObjcId,in pClassNameNSString as ObjcId) returns ObjcId binds to "objc:NSBundle.-classNamed:"

private foreign handler objC_NSMutableArrayAlloc() returns ObjcRetainedId binds to "objc:NSMutableArray.+alloc"
private foreign handler objC_NSMutableArrayInitWithCapacity(in pNSMutableArray as ObjcId, in pCapacity as NaturalFloat) returns ObjcId binds to "objc:NSMutableArray.-initWithCapacity:"
private foreign handler objC_NSMutableArrayInitWithNSArray(in pNSMutableArray as ObjcId, in pNSArray as ObjcId) returns ObjcId binds to "objc:NSMutableArray.-initWithArray:"

private foreign handler c_CFErrorCopyDescription(in pCFErrorRef as ObjcId) returns ObjcId binds to "c:CFErrorCopyDescription"

private foreign handler objC_ApplePDFKitPDFViewAlloc() returns ObjcRetainedId binds to "objc:Quartz.framework>PDFView.+alloc"
-- private foreign handler objC_ApplePDFKitPDFViewAlloc() returns ObjcRetainedId binds to "objc:PDFKit.framework>PDFView.+alloc"
private foreign handler objC_ApplePDFKitPDFViewInit(in pPDFView as ObjcId) returns ObjcRetainedId binds to "objc:Quartz.framework>PDFView.-init"
-- private foreign handler objC_ApplePDFKitPDFViewInit(in pPDFView as ObjcId) returns ObjcRetainedId binds to "objc:PDFKit.framework>PDFView.-init"

-- private foreign handler objC_ApplePDFKitPDFSetDocument(in pPDFView as ObjcId, in pPDFDocument as ObjcId) returns nothing binds to "objc:objc:PDFKit.framework>PDFView.-document:"
private foreign handler objC_ApplePDFKitPDFViewSetValueForKey(in pPDFDocument as ObjcId, in pValue as ObjcId, in pSelector as ObjcId) returns nothing binds to "objc:Quartz.framework>PDFView.-setValue:forKey:"
--private foreign handler objC_ApplePDFKitPDFViewSetValueForKey(in pPDFDocument as ObjcId, in pValue as ObjcId, in pSelector as ObjcId) returns nothing binds to "objc:PDFKit.framework>PDFView.-setValue:forKey:"

private foreign handler objC_ApplePDFKitPDFDocumentAlloc() returns ObjcRetainedId binds to "objc:Quartz.framework>PDFDocument.+alloc"
--private foreign handler objC_ApplePDFKitPDFDocumentAlloc() returns ObjcRetainedId binds to "objc:PDFKit.framework>PDFDocument.+alloc"


private foreign handler objC_ApplePDFKitPDFDocumentInitFromURL(in pPDFDocument as ObjcRetainedId, in pNSURL as ObjcId) returns ObjcRetainedId binds to "objc:Quartz.framework>PDFDocument.-initWithURL:"
-- private foreign handler objC_ApplePDFKitPDFDocumentInitFromURL(in pPDFDocument as ObjcRetainedId, in pNSURL as ObjcId) returns ObjcRetainedId binds to "objc:PDFKit.framework>PDFDocument.-initWithURL:"

--private foreign handler objC_ApplePDFKitPDFDocumentGetPageCount(in pPDFDocument as ObjcId) returns ObjcId binds to "objc:PDFKit.framework>PDFDocument.pageCount"
private foreign handler objC_ApplePDFKitPDFDocumentValueForKey(in pPDFDocument as ObjcId, in pSelector as ObjcId) returns ObjcId binds to "objc:Quartz.framework>PDFDocument.-valueForKey:"
-- private foreign handler objC_ApplePDFKitPDFDocumentValueForKey(in pPDFDocument as ObjcId, in pSelector as ObjcId) returns ObjcId binds to "objc:PDFKit.framework>PDFDocument.-valueForKey:"



private foreign handler ObjC_NSAppWindowWithWindowNumber(in pObj as ObjcId, in pWindowNumber as CLong) returns ObjcId binds to "objc:NSApplication.-windowWithWindowNumber:"

private foreign handler ObjC_NSWindowControllerAlloc() returns ObjcRetainedId binds to "objc:NSWindowController.+alloc"
private foreign handler ObjC_NSWindowControllerDealloc(in pObj as ObjcId) returns nothing binds to "objc:NSWindowController.-dealloc"
private foreign handler ObjC_NSWindowControllerInitWithWindow(in pObj as ObjcRetainedId,in pNSWindow as ObjcRetainedId) returns ObjcId binds to "objc:NSWindowController.-initWithWindow:"
--private foreign handler ObjC_NSWindowControllerInitWithWindow(in pObj as ObjcId,in pNSWindow as ObjcId) returns ObjcId binds to "objc:NSWindowController.-initWithWindow:"

private foreign handler ObjC_NSWindowControllerShowWindow(in pObj as ObjcId,in pNSWindow as ObjcId) returns nothing binds to "objc:NSWindowController.-showWindow:"
private foreign handler ObjC_NSWindowControllerClose(in pNSWindowController as ObjcId) returns nothing binds to "objc:NSWindowController.-close"

private foreign handler ObjC_NSWindowSetContentViewController(in pObj as ObjcId, in pViewController as ObjcId) returns nothing binds to "objc:NSWindow.-setContentView:"
private foreign handler ObjC_NSWindowGetContentViewController(in pObj as ObjcId) returns ObjcId binds to "objc:NSWindow.-contentViewController"

private foreign handler ObjC_NSWindowSetTitle(in pObj as ObjcId, in pTitleNSStr as ObjcId) returns nothing binds to "objc:NSWindow.-setTitle:"
-- private foreign handler ObjC_NSWindowSetTitle(in pObj as ObjcId, in pTitleNSStr as ObjcId) returns ObjcId binds to "objc:NSWindow.-setTitle:"

private foreign handler ObjC_NSWindowGetStyleMask(in pObj as ObjcId) returns CLong binds to "objc:NSWindow.-styleMask"
private foreign handler ObjC_NSWindowSetStyleMask(in pObj as ObjcId, in pOptions as CInt) returns nothing binds to "objc:NSWindow.-setStyleMask:"
private foreign handler ObjC_NSWindowSetLevel(in pObj as ObjcId, in pLevel as CInt) returns nothing binds to "objc:NSWindow.-setLevel:"
private foreign handler ObjC_NSWindowGetLevel(in pObj as ObjcId) returns CInt binds to "objc:NSWindow.-level"
private foreign handler ObjC_NSWindowGetReleasedWhenClosed(in pObj as ObjcId) returns CBool binds to "objc:NSWindow.isReleasedWhenClosed"

private foreign handler ObjC_NSWindowAlloc() returns ObjcRetainedId binds to "objc:NSWindow.+alloc"
private foreign handler ObjC_NSWindowInitWithRectStyleBackingDefer(in pObj as ObjcRetainedId, in pRect as NSRect, in pStyleMask as CLong, in pBackingStoreType as CLong, in pDefer as CBool) \
                                                       returns ObjcId binds to "objc:NSWindow.-initWithContentRect:styleMask:backing:defer:"
--private foreign handler ObjC_NSWindowInitWithRectStyleBackingDefer(in pObj as ObjcRetainedId, in pRect as NSRect, in pStyleMask as CLong, in pBackingStoreType as CLong, in pDefer as CBool) returns ObjcId binds to "objc:NSWindow.-initWithContentRect:styleMask:backing:defer:"

private foreign handler ObjC_NSViewControllerAlloc() returns ObjcRetainedId binds to "objc:NSViewController.+alloc"
private foreign handler ObjC_NSViewControllerDealloc(in pObj as ObjcId) returns nothing binds to "objc:NSViewController.-dealloc"

private foreign handler ObjC_NSWindowCreateWithViewController(in pNSViewController as ObjcId) returns ObjcRetainedId binds to "objc:NSWindow.+windowWithContentViewController:"
private foreign handler ObjC_NSWindowDealloc(in pNSViewController as ObjcId) returns nothing binds to "objc:NSWindow.-dealloc"

private foreign handler ObjC_NSWindowSetContentView(in pNSWindow as ObjcId, in pNSView as ObjcId) returns nothing binds to "objc:NSWindow.-setContentView:"
private foreign handler ObjC_NSWindowSetValueForKey( in pNSWindow as ObjcId, in pValue as ObjcRetainedId, in pSelector as ObjcId) returns nothing binds to "objc:NSWindow.-setValue:forKey:"


public handler PDFKitLoadPDFFromPath(in pPathToPDFStr as String) returns nothing
	if (the operating system is "mac") or (the operating system is "ios") then
		--- need NSURL objects to pass to AVMIDIplayer
		variable tFileNSURL as ObjcId

		--- need NSError object to pass to AVMIDIplayer
		variable tNSError as optional ObjcId
      variable tNSObj as optional ObjcId
      variable tString as String
      variable tNumber as Integer

		-- variable tIsDir as optional CBool
		-- put false into tIsDir
		unsafe
         put objC_ApplePDFKitPDFViewAlloc() into mPDFView
         objC_ApplePDFKitPDFViewInit(mPDFView)
			put objC_NSURLfileURLWithPath(StringToNSString(pPathToPDFStr)) into tFileNSURL
         put objC_ApplePDFKitPDFDocumentAlloc() into mPDFDocument
         put objC_ApplePDFKitPDFDocumentInitFromURL(mPDFDocument,tFileNSURL) into mPDFDocument
         -- objC_ApplePDFKitPDFSetDocument(mPDFView,mPDFDocument)
         objC_ApplePDFKitPDFViewSetValueForKey(mPDFView,mPDFDocument,StringToNSString("document"))
         LogNSObjectClassName(tFileNSURL)
         LogNSObjectClassName(mPDFView)
         LogNSObjectClassName(mPDFDocument)
         --put objC_ApplePDFKitPDFDocumentGetPageCount(mPDFDocument) into tNSNumber
         put objC_ApplePDFKitPDFDocumentValueForKey(mPDFDocument,StringToNSString("pageCount")) into tNSObj
         --log tNSObj
         put NumberFromNSNumber(tNSObj) into tNumber
         log ["PageCount",tNumber]
         put objC_ApplePDFKitPDFDocumentValueForKey(mPDFDocument,StringToNSString("string")) into tNSObj
         put StringFromNSString(tNSObj) into tString
         log tString
		end unsafe
	end if
end handler

public handler OpenPDFWindow() returns optional any
   variable tNSSharedApplication as ObjcId
   variable tNSRect as NSRect
   variable tWindow as optional ObjcObject
   variable tStyleMask as CLong
   variable tNSObj as ObjcId
   variable tStr as String
   -- if pWindowH is nothing then
   -- put 200 into pWindowH
   --end if
   --if pWindowW is nothing then
   --   put 200 into pWindowW
   --end if
   -- Borderless = 0
   -- Titled = 1
   -- Closable = 2
   -- Miniaturizable = 4
   -- Resizable = 8
   -- Utility = 16
   -- DocModal = 64
   -- NonactivatingPanel = 128
   -- TexturedBackground = 256
   -- Unscaled = 2048
   -- UnifiedTitleAndToolbar = 4096
   -- Hud = 8192
   -- FullScreenWindow = 16384
   -- FullSizeContentView = 32768

   -- put 1 shifted left by 0 bitwise into tStyleMask -- titlebar only
   -- put 23 into tStyleMask -- <- Titled is 1 + Closable is 2 + Utility is 16 + Miniaturizable is 4 = 23
   put 11 into tStyleMask -- <- Titled is 1 + Closable is 2 + Resizable is 8
   -- put 64+8 into tStyleMask
   unsafe
      put [640,640,500,500] into tNSRect
      put ObjC_NSWindowAlloc() into sMyWindow
      put ObjC_NSWindowInitWithRectStyleBackingDefer(sMyWindow,tNSRect,tStyleMask,2,true) into sMyWindow
     -- log sMyWindow
     ----------------- just used as a check --------------------
     -- put objC_NSObjectClassName(sMyWindow) into tNSObj
     -- put StringFromNSString(tNSObj) into tStr
      -- log tStr
      --------------------------------------------------------------
      -- put ObjC_NSWindowSetValueForKey(sMyWindow,mPDFView,StringToNSString("view")) into tNSObj
      -- LogNSObjectClassName(tNSObj)
      -- ObjC_NSWindowSetTitle(sMyWindow,StringToNSString("Paul's NSWindow Test"))
      put ObjC_NSWindowControllerAlloc() into sMyWindowController
      put ObjC_NSWindowControllerInitWithWindow(sMyWindowController,sMyWindow) into sMyWindowController
      ObjC_NSWindowControllerShowWindow(sMyWindowController,sMyWindow)
      -- ObjC_NSWindowSetValueForKey(sMyWindow,mPDFView,StringToNSString("contentView"))
      ObjC_NSWindowSetContentView(sMyWindow, mPDFView)
      -- ObjC_NSWindowSetContentViewController(sMyWindow, mPDFView)

    end unsafe
end handler

public handler ClosePDFWindow()
   unsafe
      if sMyWindowController is not nothing then
         objC_NSWindowControllerClose(sMyWindowController)
      end if
   end unsafe
end handler

public handler ViewControllerCompletionHandler( in pContext as optional ObjcBlockPointer,in pNSViewController as optional ObjcId )
   variable tStr as optional String
   if pNSViewController is not nothing then
      put GetNSObjectClassName(pNSViewController) into tStr
      if tStr is "AUViewController" then
         put pNSViewController into sPDFViewController
         -- OpenAUWindow()
      else
         log tStr
      end if
   end if
end handler

end library
-- end widget
